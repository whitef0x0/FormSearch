// Generated by CoffeeScript 1.6.2
(function() {
  var fs, models, path, utils;

  utils = require("../utils");

  models = require("../models");

  fs = require("fs");

  path = require('path');

  exports.layout = function(req, res) {
    return res.render("search");
  };

  exports.settings = function(req, res) {
    return models.Reason(function(reasons, places, cities) {
      return res.render("settings", {
        places: places,
        cities: cities,
        reasons: reasons
      });
    });
  };

  exports.upload = function(req, res) {
    return models.Reason(function(reasons, places, cities) {
      return res.render("upload", {
        reasons: reasons,
        places: places,
        cities: cities
      });
    });
  };

  exports.success = function(req, res) {
    return res.render("success");
  };

  exports.list = function(req, res) {
    var filename;

    String.prototype.trim = function() {
      return this.replace(':', '');
    };
    filename = req.params.id.trim() + "";
    return models.Form.list(function(forms) {
      return models.Reason(function(reasons, places) {
        return res.render("form", {
          doc: forms,
          reasons: reasons,
          places: places
        });
      });
    });
  };

  exports.view = function(req, res) {
    var filename;

    String.prototype.trim = function() {
      return this.replace(':', '');
    };
    filename = req.params.id.trim() + "";
    return models.Form.view(req.params.id, function(forms) {
      return models.Reason(function(reasons, places) {
        return res.render("form", {
          doc: forms,
          reasons: reasons,
          places: places
        });
      });
    });
  };

  exports.view_upload = function(req, res) {
    var form, slug, string;

    string = req.body.title + "";
    slug = utils.slugify(string);
    form = {
      title: req.body.title,
      pid: req.body.institution,
      rid: req.body.reason,
      is_ped: '',
      filename: slug
    };
    if (req.body.ped_t) {
      form.is_ped = 't';
    } else if (req.body.ped_f) {
      form.is_ped = 'f';
    }
    console.log("" + slug);
    fs.readFile(req.files.displayForm.path, function(err, data) {
      var newPath;

      newPath = __dirname + ("/../static/" + slug + ".pdf");
      return fs.writeFile(newPath, data, function(err) {
        return console.log(err);
      });
    });
    models.Form.add(form);
    console.log(form);
    return res.redirect("success");
  };

  exports.update = function(req, res) {};

  exports["delete"] = function(req, res) {
    var filename, location;

    if (req.params.type === 'form') {
      filename = req.query.id + "";
      location = path.join(__dirname, '../static/', filename + '.pdf');
      return fs.unlink(location, function(err) {
        models.Form.del(req.params.id);
        return res.redirect("/");
      });
    } else if (req.params.type === 'city') {
      models.City.del(req.query.id);
      return res.redirect("/");
    }
  };

  exports.set = function(req, res) {
    var place;

    place = {
      city_id: req.body.city,
      name: req.body.new_inst
    };
    if (place.name) {
      models.AddInst(place);
    }
    if (req.body.new_city) {
      models.City.add(req.body.new_city);
    }
    if (req.body.new_reason) {
      models.AddReason(req.body.new_reason);
    }
    return res.redirect("back");
  };

  exports.places = function(req, res) {
    return models.Reason(function(reasons, places) {
      return res.send(places);
    });
  };

  exports.results = function(req, res) {
    return models.Search(function(results) {
      return res.send(results);
    });
  };

}).call(this);
